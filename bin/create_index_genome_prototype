#!/usr/bin/env ruby

require "fileutils"
require 'pp'
require 'uri'
require 'open-uri'
require_relative 'mdatahub.rb'

class AssemblyReports2RDF

  attr_accessor :status

  def initialize input,output 
    @root_path = input 
    @out_path  = output
    @status = Hash.new{|h,k|h[k]=0}
    #output_prefix f
    @paths =[]
    datasets.each do |key, dataset|
      #pp dataset
      next unless dataset[:name] == 'INSDC'
      @source = dataset[:source]
      @idtype = dataset[:idtype]
      @reports =[]
      @out_summary=dataset[:outpath]
      parse_summary "#{@root_path}/#{dataset[:path]}"
    end
    @paths.each do |path|
       output_each_assembly path
    end
  end

  def datasets
     {:insdc =>
         { name: 'INSDC',
           path: 'genomes/ASSEMBLY_REPORTS/assembly_summary_genbank.txt',
           outpath: 'genomes/ASSEMBLY_REPORTS/assembly_summary_genbank.ttl',
           source: 'assembly_summary_genbank.txt',
           idtype: 'insdc'
         },
      :refseq =>
         { name: 'RefSeq',
           path: 'genomes/ASSEMBLY_REPORTS/assembly_summary_refseq.txt',
           outpath: 'genomes/ASSEMBLY_REPORTS/assembly_summary_refseq.ttl',
           source: 'assembly_summary_refseq.txt',
           idtype: 'refseq'
         }
     }
  end

  def parse_summary file_path 

    out_file = "#{@out_path}/#{@out_summary}"
    out_dir  = File.dirname(out_file)
    FileUtils.mkdir_p(out_dir) unless FileTest.exist?(out_dir)
    #puts out_file
    index_genome = File.join(@out_path,'mdatahub_index_genome.jsonl')
    #input_dir =  File.join(root_dir,'genome')
    File.open(index_genome ,mode = "w") do |out_p|
      head = []
      File.readlines("#{file_path}",:encoding =>'UTF-8').each_with_index do |line,i|
        if i == 0  # description row
        elsif i == 1
          head =line.strip.gsub("\r","").gsub(/^#/,"").strip.split("\t")
        else
          project =  head.zip(line.strip.split("\t")).inject({}){|h,col| h[col[0]]=col[1];h}
          #pp line
          #warn project['assembly_accession']
          #warn project['excluded_from_refseq']
          #next if project['excluded_from_refseq'].nil? #TODO
          next unless project['excluded_from_refseq'].match("derived from metagenome")
          basename = File.basename(URI.parse(project['ftp_path']).path)
          genomic_fna =  [project['ftp_path'], "#{basename}_genomic.fna.gz" ].join('/')
          genomic_fna_out = [out_dir, "#{basename}_genomic.fna.gz" ].join('/')

          require 'open-uri'

          genomic_fna_path = "#{@out_path}/#{URI.parse(genomic_fna).path}"
          sample_xml_path = "#{@out_path}/#{URI.parse(genomic_fna).path}"
          #warn project['assembly_accession']
          #j= project
          j= {
            "type"=> "genome",
            "identifier"=> project['assembly_accession'],
            "organism"=> project['organism_name'],
            "title"=> project['organism_name'],
            "description"=> project['excluded_from_refseq'],
            "data type"=> "Genome sequencing and assembly",
            "organization"=> project['submitter'],
            "publication"=> [
            {
            #"id": "35715423",
            #"Title": "The OceanDNA MAG catalog contains over 50,000 prokaryotic genomes originated from various marine environments."
            }
            ],
            "properties"=> project,
            "dbXrefs"=> [],
            "distribution"=> nil,
            "Download"=> nil,
            "status"=> "public",
            "visibility"=> nil,
            "dateCreated"=> project['seq_rel_date'].gsub('/','-'), #nil,
            "dateModified"=> project['seq_rel_date'].gsub('/','-'), #nil,
            "datePublished"=> project['seq_rel_date'].gsub('/','-'),
            "_annotation"=> {},
            "data_type"=> "low-quality MAG",
            "data_source"=> "INSDC"
          }
          #j['properties'] = project
          out_dir  = File.dirname(genomic_fna_path)
          #pp sample_xml = [out_dir, "#{basename}-biosample.xml" ].join('/')
          sample_xml = [out_dir, "#{project['biosample']}.xml" ].join('/')
          #pp out_dir
          FileUtils.mkdir_p(out_dir) unless FileTest.exist?(out_dir) 
#          unless FileTest.exist?(sample_xml)
#            puts sample_xml
#            system("efetch -db biosample -id #{project['biosample']} -mode xml > #{sample_xml}")
#          end
          if File.exist? sample_xml
            bss = BioSampleSet.new(sample_xml)
            ann = bss.to_json_plus
            j['_annotation'] = ann
          else
            j['_annotation'] = BioSampleSet.new.json_plus_default
          end
          genome_count = 1        #FIXME: genome stats.
          has_analysis = false    #FIXME  genome stats.
          j['_annotation']['completeness']= 0  #FIXME: dfast-qc
          j['_annotation']['contamination']= 0 #FIXME: dfast-qc 
          j['_annotation']['strain_heterogeneity']= 0 #FIXME: dfast-qc
          j['_annotation']['genome_count'] = genome_count
          j['has_analysis'] = has_analysis
          #puts JSON.pretty_generate(j)
          #h = {"index"=> {"_index"=> "genome","_type"=> "metadata","_id"=> j['identifier'] }}
          h = {"create"=> {"_index"=> "genome","_type"=> "metadata","_id"=> j['identifier'] }}
          out_p.puts h.to_json
          out_p.puts j.to_json
          #end
        end
      end
    end
  end
end

input = ARGV.shift
output= ARGV.shift

AssemblyReports2RDF.new(input,output)


