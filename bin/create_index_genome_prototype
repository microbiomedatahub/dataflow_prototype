#!/usr/bin/env ruby

require "fileutils"
require 'pp'
require 'uri'
require 'open-uri'
require_relative 'mdatahub.rb'
require "date"
require "json"

class AssemblyReports

  attr_accessor :status

  def initialize input,output 
    @root_path = input 
    @out_path  = output
    @status = Hash.new{|h,k|h[k]=0}
    #@paths =[]
    @source = 'assembly_summary_genbank.txt'
    @idtype = 'insdc'
    @reports =[]
    parse_summary "#{@root_path}/genomes/ASSEMBLY_REPORTS/assembly_summary_genbank.txt"
  end

  def output_file_path
    d = Date.today
    today = d.strftime("%Y%m%d")
    File.join(@out_path,"mdatahub_index_genome-#{today}.jsonl")
  end


  def parse_summary file_path 
    File.open(output_file_path ,mode = "w") do |out_p|
      head = []
      File.readlines("#{file_path}",:encoding =>'UTF-8').each_with_index do |line,i|
        if i == 0  # description row
        elsif i == 1
          head =line.strip.gsub("\r","").gsub(/^#/,"").strip.split("\t")
        else
          row =  head.zip(line.strip.split("\t")).inject({}){|h,col| h[col[0]]=col[1];h}
          next unless row['excluded_from_refseq'].match("derived from metagenome")
          #warn row['assembly_accession']
          #warn row['excluded_from_refseq']
          #next if row['excluded_from_refseq'].nil? #TODO
          #basename = File.basename(URI.parse(row['ftp_path']).path)

          j= {
            "type"=> "genome",
            "identifier"=> row['assembly_accession'],
            "organism"=> row['organism_name'],
            "title"=> row['organism_name'],
            "description"=> row['excluded_from_refseq'],
            "data type"=> "Genome sequencing and assembly",
            "organization"=> row['submitter'],
            "publication"=> [ { } ],
            "properties"=> row,
            "dbXrefs"=> [],
            "distribution"=> nil,
            "Download"=> nil,
            "status"=> "public",
            "visibility"=> nil,
            "dateCreated"=> row['seq_rel_date'].gsub('/','-'), #nil,
            "dateModified"=> row['seq_rel_date'].gsub('/','-'), #nil,
            "datePublished"=> row['seq_rel_date'].gsub('/','-'),
            "_annotation"=> {},
            "data_type"=> "low-quality MAG",
            "data_source"=> "INSDC"
          }
          asm_path = asm_acc2path row['assembly_accession']

          ###
          ### BioSample.xmlからメタデータ取得
          sample_xml = ['/work1/mdatahub/public/genome', asm_path, row['assembly_accession'], "#{row['biosample']}.xml" ].join('/')
          if File.exist? sample_xml
            bss = BioSampleSet.new(sample_xml)
            ann = bss.to_json_plus
            j['_annotation'] = ann
          else
            j['_annotation'] = BioSampleSet.new.json_plus_default
          end

          ###
          ### DFAST結果から取得
          input_dfast = File.join('/work1/mdatahub/public/genome', asm_path, row['assembly_accession'],'dfast/statistics.txt')
          #parse_dfast_statistics input_dfast
          require "csv"
          if File.exist? input_dfast
            df = CSV.read(input_dfast, col_sep: "\t", headers: false)
            df_h = Hash[*df.flatten]
            j['_dfast'] = df_h
            j['has_analysis'] = true
          else
            j['_dfast'] = {}
            j['has_analysis'] = false
          end

          ### DFASTQC結果から取得
          input_dfastqc = File.join('/work1/mdatahub/public/genome', asm_path, row['assembly_accession'],'dfastqc/dqc_result.json')
          if File.exist? input_dfastqc
            File.open(input_dfastqc) do |f|
             dqc = JSON.load(f)
             j['_dfastqc'] = dqc
          j['_annotation']['completeness']=  j['_dfastqc']['cc_result']['completeness'] || 0
          j['_annotation']['contamination']= j['_dfastqc']['cc_result']['contamination'] || 0
          j['_annotation']['strain_heterogeneity']= j['_dfastqc']['cc_result']['strain_heterogeneity'] || 0
            end
          else
            j['_dfastqc'] = {}
          j['_annotation']['completeness']=  0
          j['_annotation']['contamination']= 0
          j['_annotation']['strain_heterogeneity']= 0
          end

          ### 配列ファイルから取得
          seq_file_path = File.join('/work1/mdatahub/public/genome', asm_path, row['assembly_accession'],'genome.fna.gz')
          size = File.size(seq_file_path)
          mb_size = (size.to_f/(1024.0 * 1024.0)).round(3)
          if File.exist? seq_file_path
            j['_annotation']['data_size'] = "#{mb_size} MB"
          end

          genome_count = 1        #FIXME: genome stats.
          has_analysis = false    #FIXME  genome stats.
          #j['_annotation']['completeness']=  j['_dfastqc']['cc_result']['completeness'] || 0 
          #j['_annotation']['contamination']= j['_dfastqc']['cc_result']['contamination'] || 0 
          #j['_annotation']['strain_heterogeneity']= j['_dfastqc']['cc_result']['strain_heterogeneity'] || 0
          j['_annotation']['genome_count'] = genome_count

          #    星　contamination, completeness, sequence number, rRNA gene
          star = 1 
          #    * contamination <10(%)
          star += 1 if j['_annotation']['contamination'].to_i < 10
          #    * completeness >60(%)
          star += 1 if j['_annotation']['completeness'].to_i > 60 
          #    * sequence number <30
          star += 1 if j['_dfast']['Number of Sequences'].to_i < 30
          #    * rRNA gene number >2
          star += 1 if j['_dfast']['Number of rRNAs'].to_i < 30
          #"data_type"=> "low-quality MAG",
          star == 0 if j['has_analysis'] = false
          j['evaluation'] = "⭐️" * star

          output_file_genome_path = File.join('/work1/mdatahub/public/genome', asm_path, row['assembly_accession'],'genome.json')
          File.open(output_file_genome_path ,mode = "w") do |out_g|
            out_g.puts JSON.pretty_generate(j)
          end
          h = {"create"=> {"_index"=> "genome","_type"=> "metadata","_id"=> j['identifier'] }}
          out_p.puts h.to_json
          out_p.puts j.to_json
        end
      end
    end
  end
end

input = ARGV.shift
output= ARGV.shift

AssemblyReports.new(input,output)


